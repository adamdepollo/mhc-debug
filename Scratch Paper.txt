Scratch Paper



def build_infographics1():
    total_sites_by_name = lara_df[['County', "Total_#_Sites"]].dropna().groupby('County').sum()
    total_sites_by_name = total_sites_by_name.sort_values(by="Total_#_Sites", ascending=False)
    totnum = 20
    total_sites_by_name = total_sites_by_name.iloc[:totnum, :]
    sns.set_color_codes("pastel")

    cmap = plt.get_cmap('plasma')
    norm = mcolors.Normalize(vmin=total_sites_by_name["Total_#_Sites"].min(),
                             vmax=total_sites_by_name["Total_#_Sites"].max())
    colors = [cmap(norm(value)) for value in total_sites_by_name["Total_#_Sites"]]

    ax = sns.barplot(x="Total_#_Sites", y="County", data=total_sites_by_name,
                     palette=colors, edgecolor='w')
    ax.set(xlabel="Total Number of Sites", title='Top 20 Michigan Counties by number of manufactured home sites (LARA)')

    ax.xaxis.set_major_formatter(FuncFormatter(lambda x, _: f'{x:,.0f}'))

    return ax



def build_infographics1(lara_df):
    total_sites_by_name = lara_df[['County', "Total_#_Sites"]].dropna().groupby('County').sum()
    total_sites_by_name = total_sites_by_name.sort_values(by="Total_#_Sites", ascending=False).head(20)
    
    # Plotting with Plotly Express
    fig = px.bar(total_sites_by_name, 
                 x=total_sites_by_name["Total_#_Sites"], 
                 y=total_sites_by_name.index, 
                 orientation='h', # Horizontal bar chart
                 title='Top 20 Michigan Counties by number of manufactured home sites (LARA)')
    
    # Update layout for a cleaner look
    fig.update_layout(
        xaxis_title="Total Number of Sites",
        yaxis_title="County",
        yaxis={'categoryorder':'total ascending'}, # Sorting yaxis in ascending order for better interpretation
        xaxis=dict(tickformat=',') # Adding commas for x-axis tick labels
    )
    
    # Adding color gradient by using the 'Total_#_Sites' for color intensity
    fig.update_traces(marker_color=total_sites_by_name["Total_#_Sites"], marker_line_color='rgb(8,48,107)',
                      marker_line_width=1.5, opacity=0.6)
    
    # Inverse the y-axis to have the highest value on top
    fig.update_yaxes(autorange="reversed")

    return fig


# Convert the series to a DataFrame and provide a column name
county_counts = df_clean['County'].value_counts().rename_axis('County').reset_index(name='count')

# Concatenate dataframes
total_sites_by_name_count = pd.concat([total_sites_by_name, county_counts], axis=1)

# Now you can sort by 'count' without getting an error
total_sites_by_name_count_20 = total_sites_by_name_count.sort_values(by="count", ascending=False)

def build_infographics2():
    total_sites_by_name = mhvillage_df[['County',"Average_rent"]].dropna().groupby('County').mean()
    total_sites_by_name = total_sites_by_name.sort_values(by="Average_rent",ascending=True)
    # Drop rows where 'second_column' is empty
    df_clean = mhvillage_df[['County',"Average_rent"]].dropna()
    county_counts = df_clean['County'].value_counts()
    total_sites_by_name_count = pd.concat([total_sites_by_name,county_counts], axis=1)
    total_sites_by_name_count_20 = total_sites_by_name_count.sort_values(by="count",ascending=False)
    total_sites_by_name_count_20 = total_sites_by_name_count_20[:20].sort_values(by="Average_rent",ascending=False)
    totnum = -1

    county = total_sites_by_name_count_20[:totnum].index
    count0 = total_sites_by_name_count_20['count'][:totnum]
    y_pos = range(len(total_sites_by_name_count_20[:totnum]))

    totnum = -1
    total_sites_by_name_count_20 = total_sites_by_name_count_20.iloc[:totnum, :].reset_index()

    # Create a color gradient based on the average rent
    cmap = plt.get_cmap('viridis')  # Choose the colormap
    norm = mcolors.Normalize(vmin=total_sites_by_name_count_20["Average_rent"].min(),
                             vmax=total_sites_by_name_count_20["Average_rent"].max())
    colors = [cmap(norm(value)) for value in total_sites_by_name_count_20["Average_rent"]]

    ax = sns.barplot(x="Average_rent", y="County", data=total_sites_by_name_count_20,
                     label="Average rent", palette=colors, edgecolor='w')
    ax.set(xlabel='Average rent', title="Average rent by county (MHVillage)")

    for i, bar in enumerate(ax.patches):
        ax.text(bar.get_width(), bar.get_y() + bar.get_height() / 2,
                f'{total_sites_by_name_count_20["count"][i]:.0f}',
                ha='left', va='center', fontsize=10, color='black')

    return ax



    popup_content = HTML()
    popup_content.value = (
        f"Name: {mhvillage_df['Name'].iloc[ind]}<br>"
        f"Sites: {mhvillage_df['Sites'].iloc[ind]}<br>"
        f"House district: {mhvillage_df['House district'].iloc[ind]}<br>"
        f"Senate district: {mhvillage_df['Senate district'].iloc[ind]}<br>"
    )